#pragma once

#include <Caribou/config.h>
#include <Caribou/Geometry/Base/BaseNurbsCrv.h>
#include <Eigen/Core>

namespace caribou::geometry {

using Scalar = FLOATING_POINT_TYPE;
using Dyn_Vector = Eigen::Matrix<Scalar, Eigen::Dynamic, 1>;
using Dyn_Matrix = Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>;

struct Quadrature{

    private:
        Dyn_Vector qpnts;
        Dyn_Vector qwgts;

    public:

    Dyn_Vector get_points(void){
        return qpnts;
    }

    Dyn_Vector get_weights(void){
        return qwgts;
    }

    FLOATING_POINT_TYPE get_point(int index){
        return qpnts(index);
    }

    FLOATING_POINT_TYPE get_weight(int index){
        return qwgts(index);
    }

    Quadrature(int order){
        if (order > 16){
            std::cerr << "Order should be less than 16\n";
        }

        qpnts.resize(order);
        qwgts.resize(order);

        switch (order)
        {
        case 1:
            qpnts(0) = 0.000000000000000;
            qwgts(0) = 2.000000000000000;
            break;

        case 2:
            qpnts(0) = 0.577350269189626;
            qpnts(1) =-0.577350269189626;

            qwgts(0) = 1.000000000000000;
            qwgts(1) = 1.000000000000000;

            break;

        case 3:
            qpnts(0) = 0.774596669241483;
            qpnts(1) =-0.774596669241483;
            qpnts(2) = 0.000000000000000;

            qwgts(0) = 0.555555555555556;
            qwgts(1) = 0.555555555555556;
            qwgts(2) = 0.888888888888889;

            break;

        case 4:
            qpnts(0) = 0.861136311594053;
            qpnts(1) = -0.861136311594053;
            qpnts(2) = 0.339981043584856;
            qpnts(3) = -0.339981043584856;

            qwgts(0) = 0.347854845137454;
            qwgts(1) = 0.347854845137454;
            qwgts(2) = 0.652145154862546;
            qwgts(3) = 0.652145154862546;

            break;

        case 5:
            qpnts(0) = 0.906179845938664;
            qpnts(1) = -0.906179845938664;
            qpnts(2) = 0.538469310105683;
            qpnts(3) = -0.538469310105683;
            qpnts(4) = 0.000000000000000;

            qwgts(0) = 0.236926885056189;
            qwgts(1) = 0.236926885056189;
            qwgts(2) = 0.478628670499366;
            qwgts(3) = 0.478628670499366;
            qwgts(4) = 0.568888888888889;

            break;

        case 6:
            qpnts(0) = 0.932469514203152;
            qpnts(1) = -0.932469514203152;
            qpnts(2) = 0.661209386466265;
            qpnts(3) = -0.661209386466265;
            qpnts(4) = 0.238619186083152;
            qpnts(5) = -0.238619186083152;

            qwgts(0) = 0.171324492379170;
            qwgts(1) = 0.171324492379170;
            qwgts(2) = 0.360761573048139;
            qwgts(3) = 0.360761573048139;
            qwgts(4) = 0.467913934572691;
            qwgts(5) = 0.467913934572691;

            break;

        case 7:
            qpnts(0) = 0.949107912342759;
            qpnts(1) = -0.949107912342759;
            qpnts(2) = 0.741531185599394;
            qpnts(3) = -0.741531185599394;
            qpnts(4) = 0.405845151377397;
            qpnts(5) = -0.405845151377397;
            qpnts(6) = 0.000000000000000;

            qwgts(0) = 0.129484966168870;
            qwgts(1) = 0.129484966168870;
            qwgts(2) = 0.279705391489277;
            qwgts(3) = 0.279705391489277;
            qwgts(4) = 0.381830050505119;
            qwgts(5) = 0.381830050505119;
            qwgts(6) = 0.417959183673469;
            break;

        case 8:
            qpnts(0) = 0.960289856497536;
            qpnts(1) = -0.960289856497536;
            qpnts(2) = 0.796666477413627;
            qpnts(3) = -0.796666477413627;
            qpnts(4) = 0.525532409916329;
            qpnts(5) = -0.525532409916329;
            qpnts(6) = 0.183434642495650;
            qpnts(7) = -0.183434642495650;

            qwgts(0) = 0.101228536290376;
            qwgts(1) = 0.101228536290376;
            qwgts(2) = 0.222381034453374;
            qwgts(3) = 0.222381034453374;
            qwgts(4) = 0.313706645877887;
            qwgts(5) = 0.313706645877887;
            qwgts(6) = 0.362683783378362;
            qwgts(7) = 0.362683783378362;

            break;

        case 9:
            qpnts << 0.9681602395076260898355762,
            -0.9681602395076260898355762,
            0.8360311073266357942994298,
            -0.8360311073266357942994298,
            0.6133714327005903973087020,
            -0.6133714327005903973087020,
            0.3242534234038089290385380,
            -0.3242534234038089290385380,
                0;


            qwgts << 0.0812743883615744119718922,
            0.0812743883615744119718922,
            0.1806481606948574040584720,
            0.1806481606948574040584720,
            0.2606106964029354623187429,
            0.2606106964029354623187429,
            0.3123470770400028400686304,
            0.3123470770400028400686304,
            0.3302393550012597631645251;

            break;

        case 10:
            qpnts << 0.9739065285171717200779640,
            -0.9739065285171717200779640,
            0.8650633666889845107320967,
            -0.8650633666889845107320967,
            0.6794095682990244062343274,
            -0.6794095682990244062343274,
            0.4333953941292471907992659,
            -0.4333953941292471907992659,
            0.1488743389816312108848260,
            -0.1488743389816312108848260;


            qwgts << 0.0666713443086881375935688,
            0.0666713443086881375935688,
            0.1494513491505805931457763,
            0.1494513491505805931457763,
            0.2190863625159820439955349,
            0.2190863625159820439955349,
            0.2692667193099963550912269,
            0.2692667193099963550912269,
            0.2955242247147528701738930,
            0.2955242247147528701738930;

            break;

        case 11:

            qpnts << 0.9782286581460570,
            -0.9782286581460570,
            0.8870625997680953,
            -0.8870625997680953,
            0.7301520055740494,
            -0.7301520055740494,
            0.5190961292068118,
            -0.5190961292068118,
            0.2695431559523450,
            -0.2695431559523450,
            0.0000000000000000;

            qwgts << 0.0556685671161737,
            0.0556685671161737,
            0.1255803694649046,
            0.1255803694649046,
            0.1862902109277343,
            0.1862902109277343,
            0.2331937645919905,
            0.2331937645919905,
            0.2628045445102467,
            0.2628045445102467,
            0.2729250867779006;
            break;

        case 12:
            qpnts << 0.9815606342467192,
                -0.9815606342467192,
                0.9041172563704749,
                -0.9041172563704749,
                0.7699026741943047,
                -0.7699026741943047,
                0.5873179542866175,
                -0.5873179542866175,
                0.3678314989981802,
                -0.3678314989981802,
                0.1252334085114689,
                -0.1252334085114689;

            qwgts << 0.0471753363865118	,
                0.0471753363865118,
                0.1069393259953184,
                0.1069393259953184,
                0.1600783285433462,
                0.1600783285433462,
                0.2031674267230659,
                0.2031674267230659,
                0.2334925365383548,
                0.2334925365383548,
                0.2491470458134028,
                0.2491470458134028;
            break;

        case 13:

            qpnts << 0.9841830547185881,
                -0.9841830547185881,
                0.9175983992229779,
                -0.9175983992229779,
                0.8015780907333099,
                -0.8015780907333099,
                0.6423493394403402,
                -0.6423493394403402,
                0.4484927510364469,
                -0.4484927510364469,
                0.2304583159551348,
                -0.2304583159551348,
                0.0000000000000000;

            qwgts << 0.0404840047653159,
                0.0404840047653159,
                0.0921214998377285,
                0.0921214998377285,
                0.1388735102197872,
                0.1388735102197872,
                0.1781459807619457,
                0.1781459807619457,
                0.2078160475368885,
                0.2078160475368885,
                0.2262831802628972,
                0.2262831802628972,
                0.2325515532308739;
            break;

        case 14:

            qpnts << 0.9862838086968123,
                -0.9862838086968123,
                0.9284348836635735,
                -0.9284348836635735,
                0.8272013150697650,
                -0.8272013150697650,
                0.6872929048116855,
                -0.6872929048116855,
                0.5152486363581541,
                -0.5152486363581541,
                0.3191123689278897,
                -0.3191123689278897,
                0.1080549487073437,
                -0.1080549487073437;

            qwgts << 0.0351194603317519,
                0.0351194603317519,
                0.0801580871597602,
                0.0801580871597602,
                0.1215185706879032,
                0.1215185706879032,
                0.1572031671581935,
                0.1572031671581935,
                0.1855383974779378,
                0.1855383974779378,
                0.2051984637212956,
                0.2051984637212956,
                0.2152638534631578,
                0.2152638534631578;
            break;

        case 15:
            qpnts << 0.9879925180204854,
                -0.9879925180204854,
                0.9372733924007060,
                -0.9372733924007060,
                0.8482065834104272,
                -0.8482065834104272,
                0.7244177313601701,
                -0.7244177313601701,
                0.5709721726085388,
                -0.5709721726085388,
                0.3941513470775634,
                -0.3941513470775634,
                0.2011940939974345,
                -0.2011940939974345,
                0.0000000000000000;

            qwgts << 0.0307532419961173,
                0.0307532419961173,
                0.0703660474881081,
                0.0703660474881081,
                0.1071592204671719,
                0.1071592204671719,
                0.1395706779261543,
                0.1395706779261543,
                0.1662692058169939,
                0.1662692058169939,
                0.1861610000155622,
                0.1861610000155622,
                0.1984314853271116,
                0.1984314853271116,
                0.2025782419255613;
            break;
        case 16:
            qpnts << 0.9894009349916499,
                -0.9894009349916499,
                0.9445750230732326,
                -0.9445750230732326,
                0.8656312023878318,
                -0.8656312023878318,
                0.7554044083550030,
                -0.7554044083550030,
                0.6178762444026438,
                -0.6178762444026438,
                0.4580167776572274,
                -0.4580167776572274,
                0.2816035507792589,
                -0.2816035507792589,
                0.0950125098376374,
                -0.0950125098376374;

            qwgts << 0.0271524594117541,
                0.0271524594117541,
                0.0622535239386479,
                0.0622535239386479,
                0.0951585116824928,
                0.0951585116824928,
                0.1246289712555339,
                0.1246289712555339,
                0.1495959888165767,
                0.1495959888165767,
                0.1691565193950025,
                0.1691565193950025,
                0.1826034150449236,
                0.1826034150449236,
                0.1894506104550685,
                0.1894506104550685;
            break;

        default:
            break;
        }
    }
}; // End of Quadrature struct

struct NURBS_utils{

public:
    NURBS_utils(){

    }

    // Function to calculate knot span of a parametric point
    int findspan(const float& u, const int& p, const Dyn_Vector& U) {
        // n -> Number of control points.
        // u    -> Parametric points.
        // U -> Knot vector.

        int n = U.size() - p - 1; // No of control points
        if (u == U[n+1])
        {
            return n;
        }
        int low, high, mid;
        low = p;
        high = n+1;
        mid = floor((low + high)/2);
        while (u < U[mid] || u >= U[mid+1]) {
            if (u < U[mid]) {
                high = mid;
            }
            else {
                low = mid;
            }
            mid = floor((low+high)/2);
        }

        return mid;
    }

    // Function to calculate element-wise basis functions at given parametric point.
    Dyn_Vector bspbasisfun(const Scalar& u,const int& p,const Dyn_Vector& U) {
        Dyn_Vector N;   N.resize(p+1);  N.setZero();
        if (u == 1.0){
            N[p] = 1.0;
            return N;
        }

        int span = findspan(u, p, U);

        Dyn_Vector left;    left.resize(p+1);   left.setZero();
        Dyn_Vector right;   right.resize(p+1);  right.setZero();

        N[0] = 1.0;
        float saved, temp;
        for (int j = 1; j <= p; j++){
            left[j] = u - U[span+1-j];
            right[j] = U[span+j] - u;
            saved = 0.0;
            for (int r = 0; r<j; r++){
                temp = N[r]/(right[r+1]+left[j-r]);
                N[r] = saved + right[r+1]*temp;
                saved = left[j-r]*temp;
            }
            N[j] = saved;
        }
        return N;
    }

    // Function to calculate element-wise shape function derivative.
    Dyn_Vector basis_deri(const Scalar& u, const int & p, Dyn_Vector U) {
        int Numbasis = p+1;
        // Copying the knotvector to U for easy usage.
    //            int npts = U.size() - p - 1;
        static constexpr int n = 1; // Derivative order.
        int i = findspan(u, p, U);
        Dyn_Matrix ndu; ndu.resize(Numbasis, Numbasis); ndu.setZero();
        Dyn_Matrix ders; ders.resize(n+1, Numbasis); ders.setZero();
        Dyn_Matrix a;   a.resize(2, Numbasis); a.setZero();

        ndu(0,0) = 1.0;

        Dyn_Vector left; left.resize(Numbasis);
        Dyn_Vector right; right.resize(Numbasis);
        Scalar saved, temp;

        int j;
        for (j = 1; j <= p; j++)
        {
            left[j] = u - U[i+1-j];
            right[j] = U[i+j] - u;
            saved = 0.0;
            for (int r = 0; r < j; r++)
            {
                ndu(j,r) = right[r+1] + left[j-r];
                temp = ndu(r,j-1)/ndu(j,r);
                ndu(r,j) = saved + right[r+1]*temp;
                saved = left[j-r] * temp;
            }
            ndu(j,j) = saved;
        }

        for (j = 0; j <= p; j++)
        {
            ders(0,j) = ndu(j,p);
        }

        int s1, s2, rk, pk, j1, j2;
        Scalar d;
        for (int r = 0; r <= p; r++) {
            s1 = 0; s2 = 1;
            a(0,0) = 1.0;
            for (int k = 1; k <=n ; k++) {
                d = 0.0;
                rk = r-k;
                pk = p - k;
                if (r >= k) {
                    a(s2, 0) = a(s1,0)/ndu(pk+1, rk);
                    d = a(s2, 0)*ndu(rk, pk);
                }
                if (rk >= -1) {
                    j1 = 1;
                }
                else {
                    j1 = -rk;
                }

                if ((r-1) <= pk) {
                    j2 = k-1;
                }
                else {
                    j2 = p-r;
                }

                for (j = j1; j <= j2; j++) {
                    a(s2, j) = (a(s1, j)-a(s1, j-1))/ndu(pk+1, rk+j);
                    d = d + a(s2, j) * ndu(rk+j, pk);
                }

                if (r <= pk) {
                    a(s2, k) = -1*a(s1, k-1)/ndu(pk+1, r);
                    d = d + a(s2, k) * ndu(r, pk);
                }
                ders(k, r) = d;
                j = s1;
                s1 = s2;
                s2 = j;
            }
        }
        int r = p;
        for (int k = 1; k <= n; k++) {
            for (j = 0; j <= p; j++) {
                ders(k, j) = ders(k, j) * r;
            }
            r = r * (p-k);
        }
        return ders.row(1);
    }
};




} // End caribou::geometry namespace
